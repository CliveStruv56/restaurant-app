generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/restaurant_app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  phone     String?
  password  String
  role      UserRole  @default(CUSTOMER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  bookings  Booking[]

  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  sortOrder   Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  menuItems   MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  image       String?
  isAvailable Boolean     @default(true)
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@map("menu_items")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10, 2)
  pickupTime  DateTime?
  notes       String?
  paymentId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  notes      String?
  createdAt  DateTime @default(now())

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

model Table {
  id          String    @id @default(cuid())
  number      String    @unique
  capacity    Int
  x           Float     @default(0) // X coordinate for floor plan
  y           Float     @default(0) // Y coordinate for floor plan
  width       Float     @default(80) // Width in pixels for floor plan
  height      Float     @default(80) // Height in pixels for floor plan
  isActive    Boolean   @default(true)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]

  @@map("tables")
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tableId     String
  table       Table         @relation(fields: [tableId], references: [id], onDelete: Cascade)
  bookingDate DateTime
  startTime   DateTime
  endTime     DateTime
  partySize   Int
  status      BookingStatus @default(CONFIRMED)
  notes       String?
  customerName String?
  customerPhone String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("bookings")
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

model RestaurantSettings {
  id                    String   @id @default(cuid())
  restaurantName        String   @default("Savory Bites")
  restaurantPhone       String?
  restaurantEmail       String?
  restaurantAddress     String?
  openingTime           String   @default("09:00")
  closingTime           String   @default("22:00")
  bookingSlotDuration   Int      @default(120) // minutes
  maxAdvanceBookingDays Int      @default(30)
  pickupTimeSlots       String[] @default(["11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "17:00", "17:30", "18:00", "18:30", "19:00", "19:30", "20:00", "20:30"])
  isOnline              Boolean  @default(true)
  maintenanceMessage    String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("restaurant_settings")
}
